<?php
/**
 * Linkbuildr: Linkbuildr class
 *
 * The Linkbuildr class uses the Module_Abstract class format and
 * implements the Linkbuildr Core functionality.
 *
 * @package Linkbuildr
 * @since 1.0.0
 */

if ( ! class_exists( 'Linkbuildr' ) ) {

	/**
	 * Linkbuildr class, implementing Linkbuildr's Core functionality.
	 *
	 * Hold instances of other modules, call other modules as needed, and trigger notices.
	 *
	 * @since 1.0.0
	 *
	 * @see Module_Abstract
	 */
	class Linkbuildr extends Module_Abstract {
		/**
		 * Defines which class properties are readable.
		 *
		 * @since 1.0.0
		 * @var Array $readable_properties Required as part of the Module_Abstract architecture,
		 *                                 contains String values of the names of class properties that are readable.
		 */
		protected static $readable_properties = array();

		/**
		 * Defines which class properties are writable.
		 *
		 * @since 1.0.0
		 * @var String $writeable_properties Required as part of the Module_Abstract architecture,
		 *                                   contains String values of the names of class properties that are writable.
		 */
		protected static $writeable_properties = array();

		/**
		 * Stores instances of Modules in Linkbuilder used in Linkbuildr_Events.
		 *
		 * @since 1.0.0
		 * @var Array will contain Object instances of Modules used in Linkbuildr_Events using the String class names as Keys
		 */
		protected $modules;

		/**
		 * Const storing the version to be used when enqueuing/registering assets.
		 *
		 * @since 1.0.0
		 * @var String contains the version to be used when enqueing assets.
		 */
		const VERSION = '1.0';

		/**
		 * Const storing the prefix to be used when enqueuing/registering assets.
		 *
		 * @since 1.0.0
		 * @var String contains the prefix to be used when enqueing assets.
		 */
		const PREFIX = 'linkbuildr_';

		/**
		 * Constructor - initiates instance of other modules
		 *
		 * @since 1.0.0
		 */
		protected function __construct() {
			$this->register_hook_callbacks();

			$this->modules = array(
				'Linkbuildr_Settings'  => Linkbuildr_Settings::get_instance(),
				'Linkbuildr_Migration' => Linkbuildr_Migration::get_instance(),
				'Linkbuildr_Events'    => Linkbuildr_Events::get_instance(),
				'Linkbuildr_API'       => Linkbuildr_API::get_instance(),
			);
		}

		/**
		 * Enqueues CSS, JavaScript, etc
		 *
		 * @mvc Controller
		 */
		public static function load_resources() {
			wp_register_script(
				self::PREFIX . 'lb-scripts',
				plugins_url( 'js/linkbuildr.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_script(
				self::PREFIX . 'lb-importer-scripts',
				plugins_url( 'js/linkbuildr-importer.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_style(
				self::PREFIX . 'admin',
				plugins_url( 'css/linkbuildr.min.css', dirname( __FILE__ ) ),
				array(),
				self::VERSION,
				'all'
			);

			if ( is_admin() ) {
				wp_enqueue_style( self::PREFIX . 'admin' );
				wp_enqueue_script( self::PREFIX . 'lb-scripts' );
				wp_enqueue_script( self::PREFIX . 'lb-importer-scripts' );
			}
		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @mvc Model
		 */
		protected static function clear_caching_plugins() {
			// WP Super Cache.
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache.
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );

				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}
		}

		/**
		 * Prepares sites to use the plugin during single or network-wide activation
		 *
		 * @since 1.0.0
		 *
		 * @param Bool $network_wide Flag to indicate if the activation is Multisite/Network wide.
		 */
		public function activate( $network_wide ) {
			if ( $network_wide && is_multisite() ) {
				$sites = get_sites( array( 'limit' => false ) );

				foreach ( $sites as $site ) {
					switch_to_blog( $site['blog_id'] );
					$this->single_activate( $network_wide );
					restore_current_blog();
				}
			} else {
				$this->single_activate( $network_wide );
			}
		}

		/**
		 * Runs activation code on a new WPMS site when it's created
		 *
		 * @param Int $blog_id the ID of the site being activated.
		 */
		public function activate_new_site( $blog_id ) {
			switch_to_blog( $blog_id );
			$this->single_activate( true );
			restore_current_blog();
		}

		/**
		 * Prepares a single blog to use the plugin
		 *
		 * @param Bool $network_wide Flag to indicate if the activation is Multisite/Network wide.
		 */
		protected function single_activate( $network_wide ) {

			foreach ( $this->modules as $module ) {
				$module->activate( $network_wide );
			}
		}

		/**
		 * Rolls back activation procedures when de-activating the plugin
		 *
		 * @since 1.0.0
		 */
		public function deactivate() {
			foreach ( $this->modules as $module ) {
				$module->deactivate();
			}
		}

		/**
		 * Register callbacks for actions and filters
		 *
		 * @since 1.0.0
		 */
		public function register_hook_callbacks() {
			add_action( 'plugins_loaded', __CLASS__ . '::linkbuildr_load_plugin_textdomain' );
			add_action( 'wp_enqueue_scripts', __CLASS__ . '::load_resources' );
			add_action( 'admin_enqueue_scripts', __CLASS__ . '::load_resources' );
			add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_classic_editor_scripts' ) );

			add_action( 'wpmu_new_blog', array( $this, 'activate_new_site' ) );

			add_action( 'admin_notices', array( $this, 'lBUpdateNotice' ), 10 );

			add_action( 'init', array( $this, 'upgrade' ), 11 );
		}

		/**
		 * Loads Text Domain for the plugin
		 *
		 * @since 1.0.0
		 */
		public static function linkbuildr_load_plugin_textdomain() {
			load_plugin_textdomain( 'linkbuildr', false, basename( dirname( __FILE__ ) ) . '/languages/' );
		}

		/**
		 * Conditionally register and enqueue scripts on admin only on post.php and post-new.php
		 *
		 * @since 1.0.0
		 *
		 * @param String $hook the hook, will be the page this is called on.
		 */
		public function enqueue_classic_editor_scripts( $hook ) {
			if ( ! current_user_can( 'publish_posts' ) ) {
				return;
			}

			if ( ( 'post-new.php' !== $hook ) && ( 'post.php' !== $hook ) ) {
				return;
			}

			$show_count = $this->get_show_count();
			if ( $show_count <= 0 ) {
				return;
			}

			$data_for_script = array();

			$alert_message = self::get_alert_message();

			$data_for_script['msg'] = $alert_message;

			wp_register_script(
				self::PREFIX . 'linkbuildr-classic-editor',
				plugins_url( 'js/linkbuildr-classic.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_enqueue_script( self::PREFIX . 'linkbuildr-classic-editor' );
			wp_localize_script( self::PREFIX . 'linkbuildr-classic-editor', 'linkbuildr_popup_message', $data_for_script );
		}

		/**
		 * Gets the message to be inserted into an alert confirming publish in the even that there are still invalid Site Contacts related to the post
		 *
		 * @since 1.0.0
		 */
		private static function get_alert_message() {
			return apply_filters( 'confirm_submit__message', 'There are links within this post that do not have any contact information added. Click "Cancel" to add contact information first so they receive an email or click "OK" to continue with publishing this post.' );
		}

		/**
		 * Get Show Count, gets the number of Site Contact instances related to the current post that need more data to be valid
		 *
		 * @since 1.0.0
		 *
		 * @global Object $wpdb WordPress global db reference.
		 * @global Object $post WordPress global post reference.
		 */
		protected function get_show_count() {
			global $wpdb;
			global $post;

			$post_id_local = $post->ID;
			$blog_id_local = get_current_blog_id();

			$posts_site_contacts_table_name = Linkbuildr_Settings::$table_names['posts_site_contacts_table'];

			$posts_site_contacts_entries = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $posts_site_contacts_table_name WHERE post_id=%s AND blog_id=%s AND is_valid='false'", array( $post_id_local, $blog_id_local ) ), ARRAY_A ); // phpcs:ignore WordPress.DB.DirectDatabaseQuery,WordPress.DB.PreparedSQL
			$show_count                  = count( $posts_site_contacts_entries );

			return $show_count;
		}

		/**
		 * Get Show Count, gets the number of Site Contact instances related to the current post that need more data to be valid
		 *
		 * @since 1.0.0
		 *
		 * @global Object $pagenow WordPress global current page reference.
		 * @global Object $wpdb WordPress global db reference.
		 * @global Object $post WordPress global post reference.
		 */
		public function lBUpdateNotice() {
			global $pagenow;
			if ( ( 'post-new.php' !== $pagenow ) && ( 'post.php' !== $pagenow ) ) {
				return;
			}

			global $wpdb;
			global $post;

			$post_id_local = $post->ID;
			$blog_id_local = get_current_blog_id();

			$posts_site_contacts_table_name = Linkbuildr_Settings::$table_names['posts_site_contacts_table'];

			$posts_site_contacts_entries = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $posts_site_contacts_table_name WHERE post_id=%s AND blog_id=%s AND is_valid='false'", array( $post_id_local, $blog_id_local ) ), ARRAY_A ); // phpcs:ignore WordPress.DB.DirectDatabaseQuery,WordPress.DB.PreparedSQL
			$show_count                  = count( $posts_site_contacts_entries );
			$display_notifications       = get_option( 'linkbuildr_show_notifications' );

			if ( $show_count > 0 && $display_notifications ) {
				$variables = array();

				$post_site_contact_id              = $posts_site_contacts_entries[0]['id'];
				$site_contact_id                   = $posts_site_contacts_entries[0]['site_contact_id'];
				$variables['show_count']           = $show_count;
				$variables['post_site_contact_id'] = $post_site_contact_id;
				$variables['site_contact_id']      = $site_contact_id;
				$variables['post_id_local']        = $post_id_local;
				$variables['blog_id_local']        = $blog_id_local;
				$variables['logo_url']             = Linkbuildr_Settings::$logo_url;

				add_thickbox();

				echo self::render_template( 'admin-notice.php', $variables ); // phpcs:ignore WordPress.Security.EscapeOutput
			}
		}

		/**
		 * Checks if the plugin was recently updated and upgrades if necessary.
		 *
		 * @since 1.0.0
		 *
		 * @param string $db_version the version of the db to compare with the stored version value and know if we need to upgrade.
		 */
		public function upgrade( $db_version = 0 ) {
			if ( version_compare( $this->modules['Linkbuildr_Settings']->settings['db-version'], self::VERSION, '==' ) ) {
				return;
			} else {
				// Update database on mismatch.
				$this->modules['Linkbuildr_Settings']->settings = array( 'db-version' => self::VERSION );
				self::clear_caching_plugins();
			}

			foreach ( $this->modules as $module ) {
				$module->upgrade( $this->modules['Linkbuildr_Settings']->settings['db-version'] );
			}
		}

		/**
		 * Checks that the object is in a correct state.
		 *
		 * @since 1.0.0
		 *
		 * @param string $property An individual property to check, or 'all' to check all of them.
		 * @return bool
		 */
		protected function is_valid( $property = 'all' ) {
			return true;
		}
	}
}
